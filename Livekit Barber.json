{
  "name": "Livekit Barber",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/booking/book",
        "authentication": "basicAuth",
        "responseMode": "lastNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -224,
        -208
      ],
      "id": "d87e7998-4568-477f-b204-59a6dc23a1bb",
      "name": "book",
      "webhookId": "f9b43631-ede5-4523-985e-bce2b88ee57a",
      "credentials": {
        "httpBasicAuth": {
          "id": "EazQz6RIRyHuTSRe",
          "name": "voicebot_webhook"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/booking/cancel",
        "authentication": "basicAuth",
        "responseMode": "lastNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -224,
        -48
      ],
      "id": "e5ba9386-5fd4-4a8a-9055-e5de16516e56",
      "name": "cancel",
      "webhookId": "0c05fb67-483a-4d0f-867b-b8f7b4529297",
      "credentials": {
        "httpBasicAuth": {
          "id": "EazQz6RIRyHuTSRe",
          "name": "voicebot_webhook"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/booking/reschedule",
        "authentication": "basicAuth",
        "responseMode": "lastNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -224,
        112
      ],
      "id": "45b053f3-dfce-44bf-a2a4-3a51c5ab2725",
      "name": "reschedule",
      "webhookId": "c20a91d3-5b2b-49f0-b6a5-232d2a7dad52",
      "credentials": {
        "httpBasicAuth": {
          "id": "EazQz6RIRyHuTSRe",
          "name": "voicebot_webhook"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/booking/find-by-phone",
        "authentication": "basicAuth",
        "responseMode": "lastNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -224,
        272
      ],
      "id": "dbf2166d-f2a5-4e82-ad75-a828fe78c8ac",
      "name": "find-by-phone",
      "webhookId": "cce07d34-6ab5-4679-8b6a-58516d392b22",
      "credentials": {
        "httpBasicAuth": {
          "id": "EazQz6RIRyHuTSRe",
          "name": "voicebot_webhook"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const b = $json.body ?? $json;\nconst STAFF = [\n  { id: 'ruben',  cal: $vars.GCAL_CAL_RUBEN },\n  { id: 'sara',   cal: $vars.GCAL_CAL_SARA  },\n  { id: 'alex',   cal: $vars.GCAL_CAL_ALEX  },\n  { id: 'betran', cal: $vars.GCAL_CAL_BETRAN },\n  { id: 'pau',    cal: $vars.GCAL_CAL_PAU   },\n];\nlet candidates;\nif (!b.staff_id || String(b.staff_id).toLowerCase() === 'any') {\n  candidates = STAFF;\n} else {\n  const st = STAFF.find(s => s.id === b.staff_id);\n  if (!st) return [{ json: { ok: false, error: { code: 'no_calendar' } }, httpCode: 400 }];\n  candidates = [st];\n}\nconst dur = Number(b.duration_min ?? 30);\nconst start = new Date(b.start_iso);\nconst end = new Date(start.getTime() + dur * 60000);\n// prepare calendar items for freeBusy\nconst calendarItems = candidates.map(c => ({ id: c.cal }));\nreturn [\n  {\n    json: {\n      ...b,\n      start_iso: start.toISOString(),\n      end_iso: end.toISOString(),\n      timeZone: 'Europe/Madrid',\n      candidates: candidates,\n      calendarItems: calendarItems,\n    },\n  },\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -16,
        -208
      ],
      "id": "af5135fa-399b-4cfc-a7df-fb7590673ee4",
      "name": "Map: prepare booking"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://www.googleapis.com/calendar/v3/freeBusy",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify({\n  timeMin: $json.start_iso,\n  timeMax: $json.end_iso,\n  timeZone: $json.timeZone || 'Europe/Madrid',\n  items: $json.calendarItems\n}) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        192,
        -208
      ],
      "id": "1f273747-b40b-44fe-8bdd-eb94c4ea850d",
      "name": "Calendar free/busy",
      "credentials": {
        "googleApi": {
          "id": "P54CG1aZ9vll6MvQ",
          "name": "Google Service Account account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Ответ freeBusy из предыдущей ноды\nconst fb = $json;\n\n// Достаём \"заготовку\" из ноды map+validate (первый item)\nconst prepared = $items(\"Map: prepare booking\", 0, 0).json;\n\nconst calendars = fb.calendars || {};\nlet winner = null;\n\nfor (const c of prepared.candidates) {\n  const busy = (calendars[c.cal] || {}).busy || [];\n  if (!busy.length) { winner = c; break; }\n}\n\nif (!winner) {\n  // Нет свободного — сразу возвращаем 409\n  return [{\n    json: { ok: false, error: { code: \"time_conflict\" } },\n    httpCode: 409\n  }];\n}\n\n// Есть свободный — проставляем выбранного мастера и календарь\nreturn [{\n  json: {\n    ...prepared,\n    assigned_staff_id: winner.id,\n    chosen_calendarId: winner.cal\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        400,
        -208
      ],
      "id": "9de370a9-73e2-4d14-85e0-0eaa45da8c02",
      "name": "Pick first free calendar"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "696cbce8-9634-41a8-891c-87c3f4cd3329",
              "leftValue": "={{$json.assigned_staff_id}}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        576,
        -208
      ],
      "id": "28f260b4-a99e-4208-8ba3-9ee62f631f6f",
      "name": "Has winner? (assigned_staff_id not empty)"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"ok\": true,\n  \"booking_id\": \"={{$json.id}}\",\n  \"html_link\": \"={{$json.htmlLink}}\",\n  \"start\": \"={{$json.start.dateTime}}\",\n  \"end\": \"={{$json.end.dateTime}}\",\n  \"calendar_id\": \"={{$json.organizer.email || $json.creator.email}}\",\n  \"staff_id\": \"={{$json.assigned_staff_id}}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1008,
        -224
      ],
      "id": "edf11f95-a2dc-4f34-9a60-fa5bf6a268de",
      "name": "Respond 200 (book)"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={ \"ok\": false, \"error\": { \"code\": \"time_conflict\" } }",
        "options": {
          "responseCode": 409
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        832,
        -64
      ],
      "id": "2ef7eba7-c8c2-4cc5-914a-25b0e09192d4",
      "name": "Respond 409 (conflict)"
    },
    {
      "parameters": {
        "jsCode": "const b = $json.body ?? $json;\nif (!b.booking_id || !b.staff_id) {\n  return [{ json:{ ok:false, error:{code:'bad_request'} }, httpCode:400 }];\n}\n\nconst MAP = {\n  ruben:  $vars.GCAL_CAL_RUBEN,\n  sara:   $vars.GCAL_CAL_SARA,\n  alex:   $vars.GCAL_CAL_ALEX,\n  betran: $vars.GCAL_CAL_BETRAN,\n  pau:    $vars.GCAL_CAL_PAU,\n};\n\nreturn [{ json: { calendarId: MAP[String(b.staff_id)], booking_id: b.booking_id } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -16,
        -48
      ],
      "id": "5c94752d-ddac-4696-a5d6-747cac90b819",
      "name": "Map: calendarId+booking_id"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{ \"ok\": true }",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        400,
        -48
      ],
      "id": "9c9dc23d-42e5-4720-b5c6-a6b1ead6199f",
      "name": "Respond 200 (cancel)"
    },
    {
      "parameters": {
        "jsCode": "const b = $json.body ?? $json;\n// Validate required fields\nif (!b.booking_id || !b.staff_id || !b.new_start_iso) {\n  return [{ json: { ok: false, error: { code: 'bad_request' } }, httpCode: 400 }];\n}\n// Map staff_id to calendarId\nconst MAP = {\n  ruben:  $vars.GCAL_CAL_RUBEN,\n  sara:   $vars.GCAL_CAL_SARA,\n  alex:   $vars.GCAL_CAL_ALEX,\n  betran: $vars.GCAL_CAL_BETRAN,\n  pau:    $vars.GCAL_CAL_PAU,\n};\nconst calendarId = MAP[String(b.staff_id)];\nif (!calendarId) {\n  return [{ json: { ok: false, error: { code: 'no_calendar' } }, httpCode: 400 }];\n}\n// Determine duration in minutes; default to 30\nconst dur = Number(b.duration_min || 0);\nconst durationMin = dur > 0 ? dur : 30;\n// Compute start and end times\nconst start = new Date(b.new_start_iso);\nconst end = new Date(start.getTime() + durationMin * 60000);\nreturn [{\n  json: {\n    booking_id: b.booking_id,\n    staff_id: b.staff_id,\n    calendarId: calendarId,\n    start_iso: start.toISOString(),\n    end_iso: end.toISOString(),\n    duration_min: durationMin\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -16,
        112
      ],
      "id": "f6611b21-0678-47ad-a9e3-11c6a7d8b210",
      "name": "Map: reschedule request"
    },
    {
      "parameters": {
        "url": "=https://www.googleapis.com/calendar/v3/calendars/{{$json.calendarId}}/events/{{$json.booking_id}}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleApi",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        192,
        112
      ],
      "id": "12abe247-554d-48af-ab76-218157d70cb2",
      "name": "Get event (GET)",
      "credentials": {
        "googleApi": {
          "id": "P54CG1aZ9vll6MvQ",
          "name": "Google Service Account account"
        }
      }
    },
    {
      "parameters": {
        "method": "DELETE",
        "url": "=https://www.googleapis.com/calendar/v3/calendars/{{$json.calendarId}}/events/{{$json.booking_id}}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleApi",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        192,
        -48
      ],
      "id": "54f62618-0561-421b-ba59-6d72a5429718",
      "name": "Delete event (DELETE)",
      "credentials": {
        "googleApi": {
          "id": "P54CG1aZ9vll6MvQ",
          "name": "Google Service Account account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const base = $items(0,0).json; // из Code(map)\nlet dur = base.duration_min;\n\n// Если явной длительности нет — возьмём из события\nif (!dur || isNaN(dur) || dur <= 0) {\n  const ev = $items(\"Get event (GET)\", 0, 0).json; // <= имя твоей GET-ноды!\n  const s = new Date(ev.start?.dateTime || ev.start?.date);\n  const e = new Date(ev.end?.dateTime   || ev.end?.date);\n  dur = Math.max(1, Math.round((e - s) / 60000));\n}\n\nconst start = new Date(base.new_start_iso);\nconst end   = new Date(start.getTime() + dur * 60000);\n\nreturn [{\n  json: {\n    ...base,\n    start_iso: start.toISOString(),\n    end_iso:   end.toISOString(),\n    duration_min: dur\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        400,
        112
      ],
      "id": "e760f431-2a03-403e-8442-478bd3fda7f9",
      "name": "Compute new start/end"
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "=https://www.googleapis.com/calendar/v3/calendars/{{$json.calendarId}}/events/{{$json.booking_id}}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"start\": { \"dateTime\": \"={{$json.start_iso}}\", \"timeZone\": \"Europe/Madrid\" },\n  \"end\":   { \"dateTime\": \"={{$json.end_iso}}\",   \"timeZone\": \"Europe/Madrid\" }\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        608,
        112
      ],
      "id": "5c41114a-93ba-450a-8531-fd5bf511d054",
      "name": "Update event (PATCH)",
      "credentials": {
        "googleApi": {
          "id": "P54CG1aZ9vll6MvQ",
          "name": "Google Service Account account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={ \"ok\": true, \"start\": \"={{$json.start.dateTime || $json.start_iso}}\", \"end\": \"={{$json.end.dateTime || $json.end_iso}}\" }\n",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        816,
        112
      ],
      "id": "65466248-7410-4639-a720-55554c5d411a",
      "name": "Respond 200 (reschedule)"
    },
    {
      "parameters": {
        "jsCode": "const b = $json.body ?? $json;\nif (!b.phone || !b.staff_id) {\n  return [{ json:{ ok:false, error:{code:'bad_request'} }, httpCode:400 }];\n}\n\nconst MAP = {\n  ruben:  $vars.GCAL_CAL_RUBEN,\n  sara:   $vars.GCAL_CAL_SARA,\n  alex:   $vars.GCAL_CAL_ALEX,\n  betran: $vars.GCAL_CAL_BETRAN,\n  pau:    $vars.GCAL_CAL_PAU,\n};\n\nconst days = Number(b.days ?? 30);\nconst now = new Date();\nconst timeMin = new Date(now.getTime() - 24*3600*1000).toISOString();\nconst timeMax = new Date(now.getTime() + days*24*3600*1000).toISOString();\n\nreturn [{\n  json: {\n    phone: String(b.phone),\n    calendarId: MAP[String(b.staff_id)],\n    timeMin, timeMax\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -16,
        272
      ],
      "id": "2ae9da67-44af-4305-b4b6-ffa921ac3e10",
      "name": "Code (map+window)"
    },
    {
      "parameters": {
        "url": "=https://www.googleapis.com/calendar/v3/calendars/{{$json.calendarId}}/events",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "timeMin",
              "value": "={{$json.timeMin}}"
            },
            {
              "name": "timeMax",
              "value": "={{$json.timeMax}}"
            },
            {
              "name": "singleEvents",
              "value": "=true"
            },
            {
              "name": "orderBy",
              "value": "startTime"
            },
            {
              "name": "maxResults",
              "value": "50"
            },
            {
              "name": "privateExtendedProperty",
              "value": "=phone={{$json.phone}}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        192,
        272
      ],
      "id": "95aacdff-65ac-4b71-85ff-ac911c217b37",
      "name": "HTTP Request (LIST)",
      "credentials": {
        "googleApi": {
          "id": "P54CG1aZ9vll6MvQ",
          "name": "Google Service Account account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"ok\": true,\n  \"items\": \"={{($json.items || []).map(ev => ({ \n    id: ev.id, \n    summary: ev.summary, \n    start: (ev.start?.dateTime || ev.start?.date), \n    end: (ev.end?.dateTime || ev.end?.date), \n    html_link: ev.htmlLink \n  }))}}\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        400,
        272
      ],
      "id": "a4dfa772-1fd2-4dd2-8379-b12de2665222",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://www.googleapis.com/calendar/v3/calendars/{{$json.chosen_calendarId}}/events",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"summary\": \"Betrán — {{$json.service_id || 'Appointment'}} — {{$json.name}}\",\n  \"description\": \"Client: {{$json.name}}\\nPhone: {{$json.phone}}\\nService: {{$json.service_id || ''}}\",\n  \"start\": { \"dateTime\": \"{{$json.start_iso}}\", \"timeZone\": \"Europe/Madrid\" },\n  \"end\":   { \"dateTime\": \"{{$json.end_iso}}\",   \"timeZone\": \"Europe/Madrid\" },\n  \"extendedProperties\": {\n    \"private\": {\n      \"phone\":      \"{{$json.phone}}\",\n      \"name\":       \"{{$json.name}}\",\n      \"service_id\": \"{{$json.service_id || ''}}\",\n      \"services\":   \"{{($json.services || []).join(',')}}\",\n      \"staff_id\":   \"{{$json.assigned_staff_id}}\"\n    }\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        800,
        -224
      ],
      "id": "312d814d-84bf-45d4-831b-87c87eda3509",
      "name": "Create event (POST)",
      "credentials": {
        "httpBasicAuth": {
          "id": "EazQz6RIRyHuTSRe",
          "name": "voicebot_webhook"
        },
        "googleApi": {
          "id": "P54CG1aZ9vll6MvQ",
          "name": "Google Service Account account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "book": {
      "main": [
        [
          {
            "node": "Map: prepare booking",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "cancel": {
      "main": [
        [
          {
            "node": "Map: calendarId+booking_id",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "reschedule": {
      "main": [
        [
          {
            "node": "Map: reschedule request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "find-by-phone": {
      "main": [
        [
          {
            "node": "Code (map+window)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Map: prepare booking": {
      "main": [
        [
          {
            "node": "Calendar free/busy",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calendar free/busy": {
      "main": [
        [
          {
            "node": "Pick first free calendar",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pick first free calendar": {
      "main": [
        [
          {
            "node": "Has winner? (assigned_staff_id not empty)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has winner? (assigned_staff_id not empty)": {
      "main": [
        [
          {
            "node": "Create event (POST)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond 409 (conflict)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Map: calendarId+booking_id": {
      "main": [
        [
          {
            "node": "Delete event (DELETE)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Map: reschedule request": {
      "main": [
        [
          {
            "node": "Get event (GET)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get event (GET)": {
      "main": [
        [
          {
            "node": "Compute new start/end",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete event (DELETE)": {
      "main": [
        [
          {
            "node": "Respond 200 (cancel)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compute new start/end": {
      "main": [
        [
          {
            "node": "Update event (PATCH)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update event (PATCH)": {
      "main": [
        [
          {
            "node": "Respond 200 (reschedule)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code (map+window)": {
      "main": [
        [
          {
            "node": "HTTP Request (LIST)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request (LIST)": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create event (POST)": {
      "main": [
        [
          {
            "node": "Respond 200 (book)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "eda6d7bc-aa24-485e-8cfb-156baad23faf",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "4cadeed3bdc424c1eb28beea0443df9d7667dbc7d28eb13bdb7ede4b6f99d4f4"
  },
  "id": "khkeYokcWWgDu4q8",
  "tags": []
}